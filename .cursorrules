# KyoongDev Blog - Cursor Rules

## 프로젝트 개요
- React 기반 개인 블로그 프로젝트
- Next.js 14 App Router 사용
- Notion MCP 연동으로 콘텐츠 관리
- SEO 최적화 및 정적 사이트 생성

## 코딩 스타일 가이드

### 1. 컴포넌트 설계 원칙
- **재사용성**: 모든 컴포넌트는 재사용 가능하도록 설계
- **단일 책임**: 각 컴포넌트는 하나의 명확한 역할만 담당
- **Props 인터페이스**: TypeScript로 명확한 props 타입 정의
- **컴포넌트 네이밍**: PascalCase 사용 (예: BlogCard, Navigation)

### 2. 디자인 시스템
- **색상 팔레트**: Tailwind CSS 기본 색상 + 커스텀 primary/gray 팔레트
- **타이포그래피**: Inter (본문), JetBrains Mono (코드)
- **간격**: 4px 단위 시스템 (1 = 4px)
- **반응형**: Mobile-first 접근법

### 3. 파일 구조
```
src/
├── app/                 # Next.js App Router
├── components/          # 재사용 가능한 컴포넌트
│   ├── ui/             # 기본 UI 컴포넌트
│   ├── layout/         # 레이아웃 컴포넌트
│   └── blog/           # 블로그 관련 컴포넌트
├── lib/                # 유틸리티 함수
├── types/              # TypeScript 타입 정의
└── styles/             # 글로벌 스타일
```

### 4. 컴포넌트 작성 규칙
- **함수형 컴포넌트**: React Hooks 사용
- **Props destructuring**: 컴포넌트 시작 부분에서 props 구조분해
- **조건부 렌더링**: && 연산자 또는 삼항 연산자 사용
- **이벤트 핸들러**: handle 접두사 사용 (예: handleClick)

### 5. 스타일링 규칙
- **Tailwind CSS**: 인라인 클래스 사용
- **반응형**: sm:, md:, lg:, xl: 접두사 사용
- **다크모드**: dark: 접두사로 다크모드 스타일 정의
- **커스텀 스타일**: globals.css에서 CSS 변수 사용

### 6. 성능 최적화
- **이미지 최적화**: Next.js Image 컴포넌트 사용
- **코드 분할**: 동적 import 사용
- **메모이제이션**: React.memo, useMemo, useCallback 적절히 사용
- **SEO**: 메타데이터, 구조화된 데이터 적용

### 7. 접근성 (A11y)
- **시맨틱 HTML**: 적절한 HTML 태그 사용
- **ARIA 라벨**: 스크린 리더 지원
- **키보드 네비게이션**: Tab 키 지원
- **색상 대비**: WCAG 2.1 AA 기준 준수

### 8. 에러 처리
- **Error Boundary**: React Error Boundary 구현
- **404 페이지**: 커스텀 404 페이지
- **로딩 상태**: Skeleton UI 또는 Spinner 사용
- **에러 메시지**: 사용자 친화적인 에러 메시지

### 9. 테스트
- **단위 테스트**: Jest + React Testing Library
- **E2E 테스트**: Playwright
- **테스트 커버리지**: 80% 이상 목표

### 10. 코드 품질
- **ESLint**: Next.js 기본 설정 + 커스텀 규칙
- **Prettier**: 코드 포맷팅 자동화
- **TypeScript**: strict 모드 사용
- **Husky**: pre-commit 훅으로 코드 품질 검사

## 컴포넌트 예시

### 기본 컴포넌트 구조
```tsx
import { FC } from 'react';

interface ComponentProps {
  title: string;
  description?: string;
  className?: string;
}

export const Component: FC<ComponentProps> = ({
  title,
  description,
  className = '',
}) => {
  return (
    <div className={`p-4 ${className}`}>
      <h2 className="text-xl font-bold">{title}</h2>
      {description && (
        <p className="text-gray-600 mt-2">{description}</p>
      )}
    </div>
  );
};
```

### 레이아웃 컴포넌트
```tsx
import { FC, ReactNode } from 'react';
import { Header } from '@/components/layout/Header';
import { Footer } from '@/components/layout/Footer';

interface LayoutProps {
  children: ReactNode;
  title?: string;
  description?: string;
}

export const Layout: FC<LayoutProps> = ({
  children,
  title,
  description,
}) => {
  return (
    <div className="min-h-screen flex flex-col">
      <Header />
      <main className="flex-1">
        {children}
      </main>
      <Footer />
    </div>
  );
};
```

## 주의사항
- 모든 컴포넌트는 TypeScript로 작성
- Props는 인터페이스로 명확히 정의
- CSS 클래스는 Tailwind CSS 사용
- 반응형 디자인 필수
- 접근성 고려 필수
- 성능 최적화 고려 필수
